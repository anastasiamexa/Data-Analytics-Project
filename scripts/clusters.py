# -*- coding: utf-8 -*-
"""clusters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OaMPNXXZ5ALvPppTBeiaf8yiQtXn6rHf
"""

from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.cluster import DBSCAN
from sklearn.cluster import OPTICS
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics.cluster import homogeneity_score
from sklearn.metrics.cluster import v_measure_score
from sklearn.metrics.cluster import completeness_score
from sklearn.metrics.cluster import pair_confusion_matrix

# If the last import doesn't work, please run the code below
!pip install --upgrade scikit-learn

X = pd.read_excel('CTG(1).xlsx',usecols = "A:U")  # loading the input data
Y = pd.read_excel('CTG(1).xlsx',usecols = "V")  # loading the output data
input = X[1:].values
output = Y[1:].values

# plot the original data
plt.scatter(input[:,0], input[:,7], c=output)
plt.title("Original Data")
plt.show()

# Using the K-means cluster
kmeans = KMeans(n_clusters=10, random_state=0) # define the model
kmeans = kmeans.fit(input) # fit the model
labels = kmeans.labels_ # predictions
print("\npredictions: ", *labels)
print("original: ", *output.flatten().tolist())

# plot the results
plt.scatter(input[:,0], input[:,7], c=labels)
plt.title("K-means Final")
plt.show()

# Metrics
print("homogeneity score: ", homogeneity_score(labels.flatten().tolist(), output.flatten().tolist()))
print("completeness score: ", completeness_score(labels.flatten().tolist(), output.flatten().tolist()))
print("v-measure score: ", v_measure_score(labels.flatten().tolist(), output.flatten().tolist()))

# printing the unique values of the list
print("clusters created: ", set(labels))

# Confusion matrix
print("\nConfusion matrix: ")
print(pair_confusion_matrix(output.flatten().tolist(),labels.tolist()))

# Using the DBSCAN cluster
dbscan = DBSCAN(eps=0.3, min_samples=25) # define the model
dbscan = dbscan.fit(input) # fit the model
labels1 = dbscan.labels_  # predictions
print("\npredictions: ", *labels1)
print("original: ", *output.flatten().tolist())

# plot the results
plt.scatter(input[:,0], input[:,7], c=labels1)
plt.title("DBSCAN Final")
plt.show()

# Metrics
print("homogeneity score: ", homogeneity_score(labels1.flatten().tolist(), output.flatten().tolist()))
print("completeness score: ", completeness_score(labels1.flatten().tolist(), output.flatten().tolist()))
print("v-measure score: ", v_measure_score(labels1.flatten().tolist(), output.flatten().tolist()))

# printing the unique values of the list
print("clusters created: ", set(labels1))

# Confusion matrix
print("\nConfusion matrix: ")
print(pair_confusion_matrix(output.flatten().tolist(),labels1.tolist()))

# Using the OPTICS cluster
optics = OPTICS(min_samples=5, max_eps=0.5) # define the model
optics = optics.fit(input) # fit the model
labels2 = optics.labels_ # predictions
print("\npredictions: ", *labels2)
print("original: ", *output.flatten().tolist())

# plot the results
plt.scatter(input[:,0], input[:,7], c=labels2)
plt.title("OPTICS Final")
plt.show()

# Metrics
print("homogeneity score: ", homogeneity_score(labels2.flatten().tolist(), output.flatten().tolist()))
print("completeness score: ", completeness_score(labels2.flatten().tolist(), output.flatten().tolist()))
print("v-measure score: ", v_measure_score(labels2.flatten().tolist(), output.flatten().tolist()))

# printing the unique values of the list
print("clusters created: ", set(labels2))

# Confusion matrix
print("\nConfusion matrix: ")
print(pair_confusion_matrix(output.flatten().tolist(),labels2.tolist()))